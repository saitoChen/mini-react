(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-02 18:58:58
	 * @Description:
	 */
	const FunctionComponent = 0;
	// root
	const HostRoot = 3;
	// <div></div> -> div
	const HostComponent = 5;
	const HostText = 6;

	const NoFlags = 0b0000001;
	const Placement = 0b0000010;
	const Update = 0b0000100;
	const ChildDeletion = 0b0010000;
	const MutationMask = Placement | Update | ChildDeletion;

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-02 18:56:36
	 * @Description: fiber structure
	 */
	class FiberNode {
	    type;
	    key;
	    tag;
	    stateNode;
	    pendingProps;
	    memorizedProps;
	    memorizedState;
	    updateQueue;
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    alternate;
	    flags;
	    subtreeFlags;
	    constructor(tag, pendingProps, key) {
	        this.key = key;
	        this.tag = tag;
	        this.stateNode = null; // store real dom
	        this.type = null;
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0; // childNodes index
	        this.ref = null;
	        this.pendingProps = pendingProps;
	        this.memorizedProps = null;
	        this.updateQueue = null;
	        this.memorizedState = null;
	        this.alternate = null;
	        // effect
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	class FiberRootNode {
	    container; // base on different environment
	    current; // FiberRootNode.current -> hostRootFiber  hostRootFiber.stateNode -> FiberRootNode
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const crateWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        // reset effect
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memorizedProps = current.memorizedProps;
	    wip.memorizedState = current.memorizedState;
	    return wip;
	};
	const createFiberFromElement = (element) => {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // div
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('unknown type', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	};

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        }
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	// consume update
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memorizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (typeof action === 'function') {
	            result.memorizedState = action(baseState);
	        }
	        else {
	            result.memorizedState = action;
	        }
	    }
	    return result;
	};

	// environment supports symbol or not
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('React.element')
	    : 0xeac7;

	const ChildReconciler = (shouldTrackEffects) => {
	    const reconcileSingleElement = (returnFiber, currentFiber, element) => {
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const reconcileSingleTextNode = (returnFiber, currentFiber, content) => {
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const placeSingleChild = (fiber) => {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    };
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('unknown reconcile type');
	                    }
	                    break;
	            }
	        }
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        {
	            console.warn('unknown reconcile type');
	        }
	        return null;
	    };
	};
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const beginWork = (wip) => {
	    switch (wip.tag) {
	        case HostRoot:
	            // 1. update new State
	            // 2. return child fiberNode
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        default:
	            {
	                console.warn('unknown type by beginWork');
	            }
	    }
	    return null;
	};
	const updateHostRoot = (wip) => {
	    const baseState = wip.memorizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memorizedState } = processUpdateQueue(baseState, pending);
	    wip.memorizedState = memorizedState;
	    const nextChildren = wip.memorizedState;
	    // compare current child fiberNode with child reactElement -> (wip.memorizedState)
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	};
	// <div><span /></div> -> div's children -> span
	const updateHostComponent = (wip) => {
	    const props = wip.pendingProps;
	    const nextChildren = props.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	};
	const reconcileChildren = (wip, children) => {
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	};

	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type) => {
	    const element = document.createElement(type);
	    return element;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const appendChildToContainer = appendInitialChild;

	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case HostComponent:
	            if (current !== null && wip.stateNode) ;
	            else {
	                // 1. create Dom 2. insert dom
	                // 				const instance = createInstance(wip.type, newProps)
	                const instance = createInstance(wip.type);
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            const instance = createTextInstance(newProps.content);
	            wip.stateNode = instance;
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('unknown completeWork');
	            }
	            break;
	    }
	};
	const appendAllChildren = (parent, wip) => {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip)
	            return;
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	};
	const bubbleProperties = (wip) => {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-07 16:04:55
	 * @Description:
	 */
	const commitMutationEffects = (finishedWork) => {
	    let nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        // remove Placement from flags
	        finishedWork.flags &= ~Placement;
	    }
	    // update
	    // childDelection
	};
	const commitPlacement = (finishedWork) => {
	    // insert dom to parent's dom
	    {
	        console.warn('execute Placement operation');
	    }
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	const getHostParent = (fiber) => {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('can not find host parent');
	    }
	    return null;
	};
	const appendPlacementNodeIntoContainer = (finishedWork, hostParent) => {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-02 19:42:15
	 * @Description:
	 */
	let workInProgress = null;
	const prepareFreshStack = (root) => {
	    workInProgress = crateWorkInProgress(root.current, {});
	};
	const scheduleUpdateOnFiber = (fiber) => {
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	};
	const markUpdateFromFiberToRoot = (fiber) => {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	};
	const renderRoot = (root) => {
	    // initialize workInProgress
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (_err) {
	            {
	                console.warn('workLoop发生错误');
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    // finishedWork is wip
	    root.finishedWork = finishedWork;
	    commitRoot(root);
	};
	const commitRoot = (root) => {
	    // 1. switch fiber tree
	    // 2. execute Placement operation
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null)
	        return;
	    console.warn('commit start', finishedWork);
	    // reset
	    root.finishedWork = null;
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation
	        // switch fiber tree
	        // hostRootNode
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	};
	const workLoop = () => {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	};
	const performUnitOfWork = (fiber) => {
	    const next = beginWork(fiber);
	    fiber.memorizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	};
	const completeUnitOfWork = (fiber) => {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-03 15:22:05
	 * @Description:
	 */
	// ReactDom.createRoot
	const createContainer = (container) => {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	};
	// ReactDom.createRoot().render
	const updateContainer = (element, root) => {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-07 22:25:43
	 * @Description:
	 */
	const createRoot = (container) => {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            updateContainer(element, root);
	        }
	    };
	};

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-07 23:33:32
	 * @Description:
	 */

	return ReactDOM;

}));
