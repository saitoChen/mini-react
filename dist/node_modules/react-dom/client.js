(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.client = global.client || {}, global.client.js = factory()));
})(this, (function () { 'use strict';

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-02 18:58:58
	 * @Description:
	 */
	const FunctionComponent = 0;
	// root
	const HostRoot = 3;
	// <div></div> -> div
	const HostComponent = 5;
	const HostText = 6;

	const NoFlags = 0b0000000;
	const Placement = 0b0000001;
	const Update = 0b0000010;
	const ChildDeletion = 0b0000100;
	const MutationMask = Placement | Update | ChildDeletion;

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-02 18:56:36
	 * @Description: fiber structure
	 */
	class FiberNode {
	    type;
	    key;
	    tag;
	    stateNode;
	    pendingProps;
	    memorizedProps;
	    memorizedState;
	    updateQueue;
	    deletions;
	    return;
	    sibling;
	    child;
	    index;
	    ref;
	    alternate;
	    flags;
	    subtreeFlags;
	    constructor(tag, pendingProps, key) {
	        this.key = key;
	        this.tag = tag;
	        this.stateNode = null; // store real dom
	        this.type = null;
	        this.return = null;
	        this.sibling = null;
	        this.child = null;
	        this.index = 0; // childNodes index
	        this.ref = null;
	        this.pendingProps = pendingProps;
	        this.memorizedProps = null;
	        this.updateQueue = null;
	        this.memorizedState = null;
	        this.deletions = null;
	        this.alternate = null;
	        // effect
	        this.flags = NoFlags;
	        this.subtreeFlags = NoFlags;
	    }
	}
	class FiberRootNode {
	    container; // base on different environment
	    current; // FiberRootNode.current -> hostRootFiber  hostRootFiber.stateNode -> FiberRootNode
	    finishedWork;
	    constructor(container, hostRootFiber) {
	        this.container = container;
	        this.current = hostRootFiber;
	        hostRootFiber.stateNode = this;
	        this.finishedWork = null;
	    }
	}
	const createWorkInProgress = (current, pendingProps) => {
	    let wip = current.alternate;
	    if (wip === null) {
	        // mount
	        wip = new FiberNode(current.tag, pendingProps, current.key);
	        wip.stateNode = current.stateNode;
	        wip.alternate = current;
	        current.alternate = wip;
	    }
	    else {
	        // update
	        wip.pendingProps = pendingProps;
	        // reset effect
	        wip.flags = NoFlags;
	        wip.subtreeFlags = NoFlags;
	        wip.deletions = null;
	    }
	    wip.type = current.type;
	    wip.updateQueue = current.updateQueue;
	    wip.child = current.child;
	    wip.memorizedProps = current.memorizedProps;
	    wip.memorizedState = current.memorizedState;
	    return wip;
	};
	const createFiberFromElement = (element) => {
	    const { type, key, props } = element;
	    let fiberTag = FunctionComponent;
	    if (typeof type === 'string') {
	        // div
	        fiberTag = HostComponent;
	    }
	    else if (typeof type !== 'function' && true) {
	        console.warn('unknown type', element);
	    }
	    const fiber = new FiberNode(fiberTag, props, key);
	    fiber.type = type;
	    return fiber;
	};

	const createUpdate = (action) => {
	    return {
	        action
	    };
	};
	const createUpdateQueue = () => {
	    return {
	        shared: {
	            pending: null
	        },
	        dispatch: null
	    };
	};
	const enqueueUpdate = (updateQueue, update) => {
	    updateQueue.shared.pending = update;
	};
	// consume update
	const processUpdateQueue = (baseState, pendingUpdate) => {
	    const result = {
	        memorizedState: baseState
	    };
	    if (pendingUpdate !== null) {
	        const action = pendingUpdate.action;
	        if (typeof action === 'function') {
	            result.memorizedState = action(baseState);
	        }
	        else {
	            result.memorizedState = action;
	        }
	    }
	    return result;
	};

	// environment supports symbol or not
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('React.element')
	    : 0xeac7;

	// import ReactDOM from 'react-dom'
	const ChildReconciler = (shouldTrackEffects) => {
	    const deleteChild = (returnFiber, childToDelete) => {
	        if (!shouldTrackEffects)
	            return;
	        const deletions = returnFiber.deletions;
	        if (deletions === null) {
	            returnFiber.deletions = [childToDelete];
	            returnFiber.flags |= ChildDeletion;
	        }
	        else {
	            deletions.push(childToDelete);
	        }
	    };
	    const reconcileSingleElement = (returnFiber, currentFiber, element) => {
	        const key = element.key;
	        work: if (currentFiber !== null) {
	            // update
	            if (currentFiber.key === key) {
	                if (element.$$typeof === REACT_ELEMENT_TYPE) {
	                    if (currentFiber.type === element.type) {
	                        // equal
	                        // change to the wip
	                        const existing = useFiber(currentFiber, element.props);
	                        existing.return = returnFiber;
	                        return existing;
	                    }
	                    deleteChild(returnFiber, currentFiber);
	                    break work;
	                }
	                else {
	                    {
	                        console.warn('unknown react type', element);
	                        break work;
	                    }
	                }
	            }
	            else {
	                // delete
	                deleteChild(returnFiber, currentFiber);
	            }
	        }
	        const fiber = createFiberFromElement(element);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const reconcileSingleTextNode = (returnFiber, currentFiber, content) => {
	        if (currentFiber !== null) {
	            // update
	            if (currentFiber.tag === HostText) {
	                const existing = useFiber(currentFiber, { content });
	                existing.return = returnFiber;
	                return existing;
	            }
	            // <div></div> -> abc
	            deleteChild(returnFiber, currentFiber);
	        }
	        const fiber = new FiberNode(HostText, { content }, null);
	        fiber.return = returnFiber;
	        return fiber;
	    };
	    const placeSingleChild = (fiber) => {
	        if (shouldTrackEffects && fiber.alternate === null) {
	            fiber.flags |= Placement;
	        }
	        return fiber;
	    };
	    return function reconcileChildFibers(returnFiber, currentFiber, newChild) {
	        if (typeof newChild === 'object' && newChild !== null) {
	            switch (newChild.$$typeof) {
	                case REACT_ELEMENT_TYPE:
	                    return placeSingleChild(reconcileSingleElement(returnFiber, currentFiber, newChild));
	                default:
	                    {
	                        console.warn('unknown reconcile type');
	                    }
	                    break;
	            }
	        }
	        if (typeof newChild === 'string' || typeof newChild === 'number') {
	            return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFiber, newChild));
	        }
	        if (currentFiber !== null) {
	            deleteChild(returnFiber, currentFiber);
	        }
	        {
	            console.warn('unknown reconcile type');
	        }
	        return null;
	    };
	};
	const useFiber = (fiber, pendingProps) => {
	    const clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	};
	const reconcileChildFibers = ChildReconciler(true);
	const mountChildFibers = ChildReconciler(false);

	const currentDispatcher$1 = {
	    current: null
	};
	const resolveDispatcher = () => {
	    const dispatcher = currentDispatcher$1.current;
	    if (dispatcher === null) {
	        throw new Error('hook only uses in function');
	    }
	    return dispatcher;
	};

	const ReactElement = (type, key, ref, props) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __marks: 'jeff'
	    };
	    return element;
	};
	const isValidElement$1 = (object) => {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	};
	const jsx = (type, config, ...maybeChildren) => {
	    const props = {};
	    let key = null;
	    let ref = null;
	    // handle properties
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    handleChildren(maybeChildren, props);
	    return ReactElement(type, key, ref, props);
	};
	const handleChildren = (children, props) => {
	    const maybeChildrenLength = children.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            props.children = children[0];
	        }
	        else {
	            props.children = children;
	        }
	    }
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-10-30 15:34:42
	 * @Description: react entry
	 */
	const useState = (initialState) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	const _Inner_data = {
	    currentDispatcher: currentDispatcher$1
	};
	const version = '0.0.0';
	// distinguish jsx and jsxDev by environment
	const createElement = jsx;
	const isValidElement = isValidElement$1;

	var React = /*#__PURE__*/Object.freeze({
		__proto__: null,
		_Inner_data: _Inner_data,
		createElement: createElement,
		isValidElement: isValidElement,
		useState: useState,
		version: version
	});

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-11 16:14:37
	 * @Description:
	 */
	console.log(React);
	const internals = _Inner_data;

	let currentlyRenderFiber = null;
	let workInProgressHook = null;
	let currentHook = null;
	console.log('internals ->', internals);
	const { currentDispatcher } = internals;
	const renderWithHooks = (wip) => {
	    currentlyRenderFiber = wip;
	    wip.memorizedState = null;
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        currentDispatcher.current = HookDispatcherOnUpdate;
	    }
	    else {
	        // mount
	        currentDispatcher.current = HookDispatcherOnMount;
	    }
	    // FunctionComponent
	    const Component = wip.type;
	    const props = wip.pendingProps;
	    const children = Component(props);
	    currentlyRenderFiber = null;
	    workInProgressHook = null;
	    currentHook = null;
	    return children;
	};
	const mountState = (initialState) => {
	    const hook = mountWorkInProgressHook();
	    let memorizedState;
	    if (initialState instanceof Function) {
	        memorizedState = initialState();
	    }
	    else {
	        memorizedState = initialState;
	    }
	    const queue = createUpdateQueue();
	    hook.updateQueue = queue;
	    // @ts-ignore
	    const dispatch = dispatchSetState.bind(null, currentlyRenderFiber, queue);
	    queue.dispatch = dispatch;
	    return [memorizedState, dispatch];
	};
	const dispatchSetState = (fiber, updateQueue, action) => {
	    const update = createUpdate(action);
	    enqueueUpdate(updateQueue, update);
	    scheduleUpdateOnFiber(fiber);
	};
	const mountWorkInProgressHook = () => {
	    const hook = {
	        memorizedState: null,
	        updateQueue: null,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        if (currentlyRenderFiber === null) {
	            throw new Error('create hook error');
	        }
	        else {
	            workInProgressHook = hook;
	            currentlyRenderFiber.memorizedState = workInProgressHook;
	        }
	    }
	    else {
	        workInProgressHook.next = hook;
	        workInProgressHook = hook;
	    }
	    return workInProgressHook;
	};
	const updateState = () => {
	    const hook = updateWorkInProgressHook();
	    // calculate state
	    const queue = hook.updateQueue;
	    const pending = queue.shared.pending;
	    if (pending !== null) {
	        const { memorizedState } = processUpdateQueue(hook.memorizedState, pending);
	        hook.memorizedState = memorizedState;
	    }
	    return [hook.memorizedState, queue.dispatch];
	};
	const HookDispatcherOnMount = {
	    useState: mountState
	};
	const HookDispatcherOnUpdate = {
	    useState: updateState
	};
	const updateWorkInProgressHook = () => {
	    let nextCurrentHook;
	    if (currentHook === null) {
	        // the first hook
	        const current = currentlyRenderFiber?.alternate;
	        if (current !== null) {
	            nextCurrentHook = current?.memorizedState;
	        }
	        else {
	            nextCurrentHook = null;
	        }
	    }
	    else {
	        // the subsequent hook
	        nextCurrentHook = currentHook.next;
	    }
	    if (nextCurrentHook === null) {
	        throw new Error('hook error ( maybe hook in a if block )');
	    }
	    currentHook = nextCurrentHook;
	    const newHook = {
	        memorizedState: currentHook.memorizedState,
	        updateQueue: currentHook.updateQueue,
	        next: null
	    };
	    if (workInProgressHook === null) {
	        if (currentlyRenderFiber === null) {
	            throw new Error('create hook error');
	        }
	        else {
	            workInProgressHook = newHook;
	            currentlyRenderFiber.memorizedState = workInProgressHook;
	        }
	    }
	    else {
	        workInProgressHook.next = newHook;
	        workInProgressHook = newHook;
	    }
	    return workInProgressHook;
	};

	const beginWork = (wip) => {
	    switch (wip.tag) {
	        case HostRoot:
	            // 1. update new State
	            // 2. return child fiberNode
	            return updateHostRoot(wip);
	        case HostComponent:
	            return updateHostComponent(wip);
	        case HostText:
	            return null;
	        case FunctionComponent:
	            return updateFunctionComponent(wip);
	        default:
	            {
	                console.warn('unknown type by beginWork');
	            }
	    }
	    return null;
	};
	const updateHostRoot = (wip) => {
	    const baseState = wip.memorizedState;
	    const updateQueue = wip.updateQueue;
	    const pending = updateQueue.shared.pending;
	    updateQueue.shared.pending = null;
	    const { memorizedState } = processUpdateQueue(baseState, pending);
	    wip.memorizedState = memorizedState;
	    const nextChildren = wip.memorizedState;
	    // compare current child fiberNode with child reactElement -> (wip.memorizedState)
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	};
	const updateFunctionComponent = (wip) => {
	    const nextChildren = renderWithHooks(wip);
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	};
	// <div><span /></div> -> div's children -> span
	const updateHostComponent = (wip) => {
	    const props = wip.pendingProps;
	    const nextChildren = props.children;
	    reconcileChildren(wip, nextChildren);
	    return wip.child;
	};
	const reconcileChildren = (wip, children) => {
	    const current = wip.alternate;
	    if (current !== null) {
	        // update
	        wip.child = reconcileChildFibers(wip, current?.child, children);
	    }
	    else {
	        // mount
	        wip.child = mountChildFibers(wip, null, children);
	    }
	};

	const elementPropsKey = '__props';
	const validEventTypeList = ['click'];
	const updateFiberProps = (node, props) => {
	    node[elementPropsKey] = props;
	};
	const initEvent = (container, eventType) => {
	    if (!validEventTypeList.includes(eventType)) {
	        console.warn('can not support type', eventType);
	        return;
	    }
	    {
	        console.log('init event', eventType);
	    }
	    container.addEventListener(eventType, (e) => {
	        dispatchEvent(container, eventType, e);
	    });
	};
	const createSyntheticEvent = (e) => {
	    const syntheticEvents = e;
	    syntheticEvents.__stopPropagation = false;
	    const originPropagation = e.stopPropagation;
	    syntheticEvents.stopPropagation = () => {
	        syntheticEvents.__stopPropagation = true;
	        if (originPropagation) {
	            originPropagation();
	        }
	    };
	    return syntheticEvents;
	};
	const triggerEventFlow = (paths, se) => {
	    for (let i = 0; i < paths.length; i++) {
	        const callback = paths[i];
	        callback.call(null, se);
	        if (se.__stopPropagation) {
	            break;
	        }
	    }
	};
	const dispatchEvent = (container, eventType, e) => {
	    const targetElement = e.target;
	    if (targetElement === null) {
	        console.warn('not exist target', e);
	        return;
	    }
	    // collect event
	    const { buble, capture } = collectPaths(targetElement, container, eventType);
	    // create synthetic event
	    const se = createSyntheticEvent(e);
	    triggerEventFlow(capture, se);
	    if (!se.__stopPropagation) {
	        triggerEventFlow(buble, se);
	    }
	};
	const getEvenetCallbackNameFromEventType = (eventType) => {
	    return {
	        click: ['onClickCapture', 'onClick']
	    }[eventType];
	};
	const collectPaths = (targetElement, container, eventType) => {
	    const paths = {
	        capture: [],
	        buble: []
	    };
	    while (targetElement !== null && targetElement !== container) {
	        // collect
	        const elementProps = targetElement[elementPropsKey];
	        if (elementProps) {
	            // click -> onClick, onClickCapture
	            const callbackNameList = getEvenetCallbackNameFromEventType(eventType);
	            if (callbackNameList) {
	                callbackNameList.forEach((callbackName, i) => {
	                    const eventCallback = elementProps[callbackName];
	                    if (eventCallback) {
	                        if (i === 0) {
	                            // capture
	                            paths.capture.unshift(eventCallback);
	                        }
	                        else {
	                            paths.buble.push(eventCallback);
	                        }
	                    }
	                });
	            }
	        }
	        targetElement = targetElement.parentNode;
	    }
	    return paths;
	};

	// export const createInstance = (type: string, props: any): Instance => {
	const createInstance = (type, props) => {
	    const element = document.createElement(type);
	    updateFiberProps(element, props);
	    return element;
	};
	const commitUpdate = (fiber) => {
	    switch (fiber.tag) {
	        case HostText:
	            const text = fiber.memorizedProps?.content;
	            return commitTextUpdate(fiber.stateNode, text);
	        default:
	            {
	                console.warn('unfinish Update type', fiber);
	            }
	            break;
	    }
	};
	const commitTextUpdate = (textInstance, content) => {
	    textInstance.textContent = content;
	};
	const appendInitialChild = (parent, child) => {
	    parent.appendChild(child);
	};
	const createTextInstance = (content) => {
	    return document.createTextNode(content);
	};
	const removeChild = (child, container) => {
	    container.removeChild(child);
	};
	const appendChildToContainer = appendInitialChild;

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-02 19:38:35
	 * @Description:
	 */
	const markUpdate = (fiber) => {
	    fiber.flags |= Update;
	};
	const completeWork = (wip) => {
	    const newProps = wip.pendingProps;
	    const current = wip.alternate;
	    switch (wip.tag) {
	        case HostRoot:
	            bubbleProperties(wip);
	            return null;
	        case HostComponent:
	            if (current !== null && wip.stateNode) {
	                // update
	                updateFiberProps(wip.stateNode, newProps);
	            }
	            else {
	                // 1. create Dom 2. insert dom
	                // 				const instance = createInstance(wip.type, newProps)
	                const instance = createInstance(wip.type, newProps);
	                appendAllChildren(instance, wip);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case HostText:
	            if (current !== null && wip.stateNode) {
	                const oldText = current.memorizedProps?.content;
	                const newText = newProps.content;
	                if (oldText !== newText) {
	                    markUpdate(wip);
	                }
	            }
	            else {
	                const instance = createTextInstance(newProps.content);
	                wip.stateNode = instance;
	            }
	            bubbleProperties(wip);
	            return null;
	        case FunctionComponent:
	            bubbleProperties(wip);
	            return null;
	        default:
	            {
	                console.warn('unknown completeWork');
	            }
	            break;
	    }
	};
	const appendAllChildren = (parent, wip) => {
	    let node = wip.child;
	    while (node !== null) {
	        if (node.tag === HostComponent || node.tag === HostText) {
	            appendInitialChild(parent, node?.stateNode);
	        }
	        else if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === wip)
	            return;
	        while (node.sibling === null) {
	            if (node.return === null || node.return === wip) {
	                return;
	            }
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	};
	const bubbleProperties = (wip) => {
	    let subtreeFlags = NoFlags;
	    let child = wip.child;
	    while (child !== null) {
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags;
	        child.return = wip;
	        child = child.sibling;
	    }
	    wip.subtreeFlags |= subtreeFlags;
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-07 16:04:55
	 * @Description:
	 */
	const commitMutationEffects = (finishedWork) => {
	    let nextEffect = finishedWork;
	    while (nextEffect !== null) {
	        const child = nextEffect.child;
	        if ((nextEffect.subtreeFlags & MutationMask) !== NoFlags &&
	            child !== null) {
	            nextEffect = child;
	        }
	        else {
	            up: while (nextEffect !== null) {
	                commitMutationEffectsOnFiber(nextEffect);
	                const sibling = nextEffect.sibling;
	                if (sibling !== null) {
	                    nextEffect = sibling;
	                    break up;
	                }
	                nextEffect = nextEffect.return;
	            }
	        }
	    }
	};
	// update dom and remove flag
	const commitMutationEffectsOnFiber = (finishedWork) => {
	    const flags = finishedWork.flags;
	    if ((flags & Placement) !== NoFlags) {
	        commitPlacement(finishedWork);
	        // remove Placement from flags
	        finishedWork.flags &= ~Placement;
	    }
	    // update
	    if ((flags & Update) !== NoFlags) {
	        commitUpdate(finishedWork);
	        // remove Placement from flags
	        finishedWork.flags &= ~Update;
	    }
	    // childDelection
	    if ((flags & ChildDeletion) !== NoFlags) {
	        const deletions = finishedWork.deletions;
	        if (deletions !== null) {
	            deletions.forEach((childToDelete) => {
	                commitDeletion(childToDelete);
	            });
	        }
	        // remove Placement from flags
	        finishedWork.flags &= ~ChildDeletion;
	    }
	};
	const commitDeletion = (childToDelete) => {
	    let rootHostNode = null;
	    commitNestedComponent(childToDelete, (unmountFiber) => {
	        switch (unmountFiber.tag) {
	            case HostComponent:
	                if (rootHostNode === null) {
	                    rootHostNode = unmountFiber;
	                }
	                // TODO unbind ref
	                return;
	            case HostText:
	                if (rootHostNode === null) {
	                    rootHostNode = unmountFiber;
	                }
	                return;
	            case FunctionComponent:
	                // TODO useEffect unmount
	                return;
	            default:
	                {
	                    console.warn('unfinish unmount type', unmountFiber);
	                }
	                break;
	        }
	    });
	    // remove rootHostNode's dom
	    if (rootHostNode !== null) {
	        const hostParent = getHostParent(childToDelete);
	        if (hostParent) {
	            removeChild(rootHostNode.stateNode, hostParent);
	        }
	    }
	    childToDelete.return = null;
	    childToDelete.child = null;
	};
	const commitNestedComponent = (root, onCommitUnmount) => {
	    let node = root;
	    while (true) {
	        onCommitUnmount(node);
	        if (node.child !== null) {
	            node.child.return = node;
	            node = node.child;
	            continue;
	        }
	        if (node === root)
	            return;
	        while (node.sibling === null) {
	            if (node.return === null || node.return === root)
	                return;
	            node = node.return;
	        }
	        node.sibling.return = node.return;
	        node = node.sibling;
	    }
	};
	const commitPlacement = (finishedWork) => {
	    // insert dom to parent's dom
	    {
	        console.warn('execute Placement operation');
	    }
	    const hostParent = getHostParent(finishedWork);
	    if (hostParent) {
	        appendPlacementNodeIntoContainer(finishedWork, hostParent);
	    }
	};
	const getHostParent = (fiber) => {
	    let parent = fiber.return;
	    while (parent) {
	        const parentTag = parent.tag;
	        if (parentTag === HostComponent) {
	            return parent.stateNode;
	        }
	        if (parentTag === HostRoot) {
	            return parent.stateNode.container;
	        }
	        parent = parent.return;
	    }
	    {
	        console.warn('can not find host parent');
	    }
	    return null;
	};
	const appendPlacementNodeIntoContainer = (finishedWork, hostParent) => {
	    if (finishedWork.tag === HostComponent || finishedWork.tag === HostText) {
	        appendChildToContainer(hostParent, finishedWork.stateNode);
	        return;
	    }
	    const child = finishedWork.child;
	    if (child !== null) {
	        appendPlacementNodeIntoContainer(child, hostParent);
	        let sibling = child.sibling;
	        while (sibling !== null) {
	            appendPlacementNodeIntoContainer(sibling, hostParent);
	            sibling = sibling.sibling;
	        }
	    }
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-02 19:42:15
	 * @Description:
	 */
	let workInProgress = null;
	const prepareFreshStack = (root) => {
	    workInProgress = createWorkInProgress(root.current, {});
	};
	const scheduleUpdateOnFiber = (fiber) => {
	    const root = markUpdateFromFiberToRoot(fiber);
	    renderRoot(root);
	};
	const markUpdateFromFiberToRoot = (fiber) => {
	    let node = fiber;
	    let parent = node.return;
	    while (parent !== null) {
	        node = parent;
	        parent = node.return;
	    }
	    if (node.tag === HostRoot) {
	        return node.stateNode;
	    }
	    return null;
	};
	const renderRoot = (root) => {
	    // initialize workInProgress
	    prepareFreshStack(root);
	    do {
	        try {
	            workLoop();
	            break;
	        }
	        catch (_err) {
	            {
	                console.warn('workLoop发生错误');
	            }
	            workInProgress = null;
	        }
	    } while (true);
	    const finishedWork = root.current.alternate;
	    // finishedWork is wip
	    root.finishedWork = finishedWork;
	    commitRoot(root);
	};
	const commitRoot = (root) => {
	    // 1. switch fiber tree
	    // 2. execute Placement operation
	    const finishedWork = root.finishedWork;
	    if (finishedWork === null)
	        return;
	    console.warn('commit start', finishedWork);
	    // reset
	    root.finishedWork = null;
	    const subtreeHasEffect = (finishedWork.subtreeFlags & MutationMask) !== NoFlags;
	    const rootHasEffect = (finishedWork.flags & MutationMask) !== NoFlags;
	    // have effect
	    if (subtreeHasEffect || rootHasEffect) {
	        // beforeMutation
	        // mutation
	        // switch fiber tree
	        // hostRootNode
	        commitMutationEffects(finishedWork);
	        root.current = finishedWork;
	        // layout
	    }
	    else {
	        root.current = finishedWork;
	    }
	};
	const workLoop = () => {
	    while (workInProgress !== null) {
	        performUnitOfWork(workInProgress);
	    }
	};
	const performUnitOfWork = (fiber) => {
	    const next = beginWork(fiber);
	    fiber.memorizedProps = fiber.pendingProps;
	    if (next === null) {
	        completeUnitOfWork(fiber);
	    }
	    else {
	        workInProgress = next;
	    }
	};
	const completeUnitOfWork = (fiber) => {
	    let node = fiber;
	    do {
	        completeWork(node);
	        const sibling = node.sibling;
	        if (sibling !== null) {
	            workInProgress = sibling;
	            return;
	        }
	        node = node.return;
	        workInProgress = node;
	    } while (node !== null);
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-03 15:22:05
	 * @Description:
	 */
	// ReactDom.createRoot
	const createContainer = (container) => {
	    const hostRootFiber = new FiberNode(HostRoot, {}, null);
	    const root = new FiberRootNode(container, hostRootFiber);
	    hostRootFiber.updateQueue = createUpdateQueue();
	    return root;
	};
	// ReactDom.createRoot().render
	const updateContainer = (element, root) => {
	    const hostRootFiber = root.current;
	    const update = createUpdate(element);
	    enqueueUpdate(hostRootFiber.updateQueue, update);
	    scheduleUpdateOnFiber(hostRootFiber);
	    return element;
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-07 22:25:43
	 * @Description:
	 */
	const createRoot = (container) => {
	    const root = createContainer(container);
	    return {
	        render(element) {
	            initEvent(container, 'click');
	            return updateContainer(element, root);
	        }
	    };
	};

	var ReactDOM = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createRoot: createRoot
	});

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-11-07 23:33:32
	 * @Description:
	 */

	return ReactDOM;

}));
