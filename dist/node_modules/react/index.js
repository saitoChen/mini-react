(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
	typeof define === 'function' && define.amd ? define(['exports'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.index = global.index || {}, global.index.js = {})));
})(this, (function (exports) { 'use strict';

	const currentDispatcher = {
	    current: null
	};
	const resolveDispatcher = () => {
	    const dispatcher = currentDispatcher.current;
	    if (dispatcher === null) {
	        throw new Error('hook only uses in function');
	    }
	    return dispatcher;
	};

	// environment supports symbol or not
	const supportSymbol = typeof Symbol === 'function' && Symbol.for;
	const REACT_ELEMENT_TYPE = supportSymbol
	    ? Symbol.for('React.element')
	    : 0xeac7;

	const ReactElement = (type, key, ref, props) => {
	    const element = {
	        $$typeof: REACT_ELEMENT_TYPE,
	        type,
	        key,
	        ref,
	        props,
	        __marks: 'jeff'
	    };
	    return element;
	};
	const isValidElement$1 = (object) => {
	    return (typeof object === 'object' &&
	        object !== null &&
	        object.$$typeof === REACT_ELEMENT_TYPE);
	};
	const jsx = (type, config, ...maybeChildren) => {
	    const props = {};
	    let key = null;
	    let ref = null;
	    // handle properties
	    for (const prop in config) {
	        const val = config[prop];
	        if (prop === 'key') {
	            if (val !== undefined) {
	                key = val;
	            }
	            continue;
	        }
	        if (prop === 'ref') {
	            if (val !== undefined) {
	                ref = val;
	            }
	            continue;
	        }
	        if (Object.prototype.hasOwnProperty.call(config, prop)) {
	            props[prop] = val;
	        }
	    }
	    handleChildren(maybeChildren, props);
	    return ReactElement(type, key, ref, props);
	};
	const handleChildren = (children, props) => {
	    const maybeChildrenLength = children.length;
	    if (maybeChildrenLength) {
	        if (maybeChildrenLength === 1) {
	            props.children = children[0];
	        }
	        else {
	            props.children = children;
	        }
	    }
	};

	/*
	 * @Author: chenjianfeng chenjianfeng93@163.com
	 * @Date: 2023-10-30 15:34:42
	 * @Description: react entry
	 */
	const useState = (initialState) => {
	    const dispatcher = resolveDispatcher();
	    return dispatcher.useState(initialState);
	};
	const _Inner_data = {
	    currentDispatcher
	};
	const version = '0.0.0';
	// distinguish jsx and jsxDev by environment
	const createElement = jsx;
	const isValidElement = isValidElement$1;

	exports._Inner_data = _Inner_data;
	exports.createElement = createElement;
	exports.isValidElement = isValidElement;
	exports.useState = useState;
	exports.version = version;

}));
